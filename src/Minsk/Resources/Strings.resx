<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="Diagnostic_UnterminatedString">
        <value>Unterminated string literal.</value>
    </data>
    <data name="Diagnostic_UnterminatedMultiLineComment" xml:space="preserve">
        <value>Unterminated multi-line comment.</value>
    </data>
    <data name="Diagnostic_UnexpectedToken" xml:space="preserve">
        <value>Unexpected token &lt;{0}&gt;, expected &lt;{1}&gt;.</value>
    </data>
    <data name="Diagnostic_InvalidNumber" xml:space="preserve">
        <value>The number {0} isn't valid {1}.</value>
    </data>
    <data name="Diagnostic_BadCharacter" xml:space="preserve">
        <value>Bad character input: '{0}'.</value>
    </data>
    <data name="Diagnostic_UndefinedUnaryOperator" xml:space="preserve">
        <value>Unary operator '{0}' is not defined for type '{1}'.</value>
    </data>
    <data name="Diagnostic_UndefinedBinaryOperator" xml:space="preserve">
        <value>Binary operator '{0}' is not defined for types '{1}' and '{2}'.</value>
    </data>
    <data name="Diagnostic_ParameterAlreadyDeclared" xml:space="preserve">
        <value>A parameter with the name '{0}' already exists.</value>
    </data>
    <data name="Diagnostic_UndefinedVariable" xml:space="preserve">
        <value>Variable '{0}' doesn't exist.</value>
    </data>
    <data name="Diagnostic_NotAVariable" xml:space="preserve">
        <value>'{0}' is not a variable.</value>
    </data>
    <data name="Diagnostic_UndefinedType" xml:space="preserve">
        <value>Type '{0}' doesn't exist.</value>
    </data>
    <data name="Diagnostic_CannotConvert" xml:space="preserve">
        <value>Cannot convert type '{0}' to '{1}'.</value>
    </data>
    <data name="Diagnostic_CannotConvertImplicitly" xml:space="preserve">
        <value>Cannot convert type '{0}' to '{1}'. An explicit conversion exists (are you missing a cast?)</value>
    </data>
    <data name="Diagnostic_SymbolAlreadyDeclared" xml:space="preserve">
        <value>'{0}' is already declared.</value>
    </data>
    <data name="Diagnostic_CannotAssign" xml:space="preserve">
        <value>Variable '{0}' is read-only and cannot be assigned to.</value>
    </data>
    <data name="Diagnostic_UndefinedFunction" xml:space="preserve">
        <value>Function '{0}' doesn't exist.</value>
    </data>
    <data name="Diagnostic_NotAFunction" xml:space="preserve">
        <value>'{0}' is not a function.</value>
    </data>
    <data name="Diagnostic_WrongArgumentCount" xml:space="preserve">
        <value>Function '{0}' requires {1} arguments but was given {2}.</value>
    </data>
    <data name="Diagnostic_ExpressionMustHaveValue" xml:space="preserve">
        <value>Expression must have a value.</value>
    </data>
    <data name="Diagnostic_InvalidBreakOrContinue" xml:space="preserve">
        <value>The keyword '{0}' can only be used inside of loops.</value>
    </data>
    <data name="Diagnostic_AllPathsMustReturn" xml:space="preserve">
        <value>Not all code paths return a value.</value>
    </data>
    <data name="Diagnostic_InvalidReturnExpression" xml:space="preserve">
        <value>Since the function '{0}' does not return a value the 'return' keyword cannot be followed by an expression.</value>
    </data>
    <data name="Diagnostic_InvalidReturnWithValueInGlobalStatements" xml:space="preserve">
        <value>The 'return' keyword cannot be followed by an expression in global statements.</value>
    </data>
    <data name="Diagnostic_MissingReturnExpression" xml:space="preserve">
        <value>An expression of type '{0}' is expected.</value>
    </data>
    <data name="Diagnostic_InvalidExpressionStatement" xml:space="preserve">
        <value>Only assignment and call expressions can be used as a statement.</value>
    </data>
    <data name="Diagnostic_OnlyOneFileCanHaveGlobalStatements" xml:space="preserve">
        <value>At most one file can have global statements.</value>
    </data>
    <data name="Diagnostic_UnreachableCode" xml:space="preserve">
        <value>Unreachable code detected.</value>
    </data>
    <data name="Diagnostic_RequiredMethodNotFound" xml:space="preserve">
        <value>The required method '{0}' cannot be resolved among the given references.</value>
    </data>
    <data name="Diagnostic_RequiredTypeAmbiguousWithMinsk" xml:space="preserve">
        <value>The required type '{0}' ('{1}') was found in multiple references: {2}.</value>
    </data>
    <data name="Diagnostic_RequiredTypeAmbiguous" xml:space="preserve">
        <value>The required type '{0}' was found in multiple references: {1}.</value>
    </data>
    <data name="Diagnostic_RequiredTypeNotFound" xml:space="preserve">
        <value>The required type '{0}' cannot be resolved among the given references.</value>
    </data>
    <data name="Diagnostic_RequiredTypeNotFoundWithMinsk" xml:space="preserve">
        <value>The required type '{0}' ('{1}') cannot be resolved among the given references.</value>
    </data>
    <data name="Diagnostic_InvalidReference" xml:space="preserve">
        <value>The reference is not a valid .NET assembly: '{0}'</value>
    </data>
    <data name="Diagnostic_CannotMixMainAndGlobalStatements" xml:space="preserve">
        <value>Cannot declare main function when global statements are used.</value>
    </data>
    <data name="Diagnostic_MainMustHaveCorrectSignature" xml:space="preserve">
        <value>main must not take arguments and not return anything.</value>
    </data>
</root>